defmodule Codegen.SDK.Builder.Render do
  @src_template EEx.compile_string("""
                import dataclass
                from baselib import Resource
                <%= for import <- imports do %>import <%= import %><% end %>

                <%= for klass <- classes do %>
                @dataclass
                class <%= klass.name %>:
                    <%= if klass.docstring do %>\"""<%= klass.docstring %>\"""<% end %>
                <%= for prop <- klass.properties do %>    <%= if prop.docstring do %><%= #: prop.docstring %><% end %>
                    <%= prop.name %>: <%= prop.py_type %><% end %>

                <% end %>

                class Endpoint(Resource[<%= primary_class.name %>]):
                    uri = "<%= uri %>"
                    klass = <%= primary_class.name %>
                """)

  @setup_template EEx.compile_string("""
                  #!/usr/bin/env python

                  from setuptools import setup

                  setup(
                      name="<%= name %>",
                      version="<%= version %>",
                      description="Autogenerated SDK",
                      long_description="Description",
                      author="A Robot",
                      packages=["<%= name %>"],
                      python_requires=">3.6.*, <4",
                      install_requires=[],
                      classifiers=[],
                  )

                  """)

  def build_python(ctx, uri \\ "http://") do
    {result, _} = Code.eval_quoted(@src_template, [{:uri, uri} | Map.to_list(ctx)])
    result
  end

  def build_setuppy(name, version) do
    {result, _} = Code.eval_quoted(@setup_template, name: name, version: version)
    result
  end
end
